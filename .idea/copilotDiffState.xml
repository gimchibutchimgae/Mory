<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/(auth)/initial-setup.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/(auth)/initial-setup.tsx" />
              <option name="originalContent" value="import { useRouter } from 'expo-router';&#10;import { useState } from 'react';&#10;import { View, Text, Button, StyleSheet, TextInput, TouchableOpacity, Image } from 'react-native';&#10;import ProgressBar from '@/components/ProgressBar';&#10;import BackButton from '@/components/BackButton';&#10;import CharacterSelection from '@/components/CharacterSelection';&#10;import { useAuth } from '@/app/context/AuthContext';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;const TOTAL_STEPS = 3;&#10;&#10;export default function InitialSetupScreen() {&#10;  const router = useRouter();&#10;  const { signIn } = useAuth();&#10;  const [step, setStep] = useState(1);&#10;  const [name, setName] = useState('');&#10;  const [personality1, setPersonality1] = useState&lt;'활발' | '소심' | null&gt;(null);&#10;  const [personality2, setPersonality2] = useState&lt;'감성적' | '이성적' | null&gt;(null);&#10;&#10;  const handleNext = () =&gt; {&#10;    if (step &lt; TOTAL_STEPS) {&#10;      setStep(step + 1);&#10;    }&#10;    else {&#10;      signIn();&#10;      router.replace('/(tabs)/');&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;ProgressBar currentStep={step} totalSteps={TOTAL_STEPS} /&gt;&#10;      &lt;View style={styles.header}&gt;&#10;        &lt;BackButton /&gt;&#10;        &lt;Text style={styles.title}&gt;Initial Setup&lt;/Text&gt;&#10;        &lt;View style={{ width: 24 }} /&gt;{/* Placeholder for alignment */}&#10;      &lt;/View&gt;&#10;&#10;      {step === 1 &amp;&amp; (&#10;        &lt;View style={styles.stepContent}&gt;&#10;          &lt;Text style={styles.stepTitle}&gt;이름&lt;/Text&gt;&#10;          &lt;Text style={styles.stepSubtitle}&gt;내가 부를 너의 이름을 알려줘&lt;/Text&gt;&#10;          &lt;Text style={styles.label}&gt;나의 이름은&lt;/Text&gt;&#10;          &lt;TextInput&#10;            style={styles.input}&#10;            placeholder=&quot;이름을 입력하세요&quot;&#10;            placeholderTextColor={Colors.lightGray}&#10;            value={name}&#10;            onChangeText={setName}&#10;          /&gt;&#10;        &lt;/View&gt;&#10;      )}&#10;&#10;      {step === 2 &amp;&amp; (&#10;        &lt;View style={styles.stepContent}&gt;&#10;          &lt;Text style={styles.stepTitle}&gt;성격&lt;/Text&gt;&#10;          &lt;Text style={styles.stepSubtitle}&gt;너의 성격을 알려줘&lt;/Text&gt;&#10;          &lt;Text style={styles.label}&gt;너는 어느 쪽에 가까워?&lt;/Text&gt;&#10;          &lt;View style={styles.characterSelectionContainer}&gt;&#10;            &lt;CharacterSelection&#10;              onPress={() =&gt; setPersonality1('활발')}&#10;              isSelected={personality1 === '활발'}&#10;              image={require('@/assets/images/emotion_active.png')}&#10;            /&gt;&#10;            &lt;CharacterSelection&#10;              onPress={() =&gt; setPersonality1('소심')}&#10;              isSelected={personality1 === '소심'}&#10;              image={require('@/assets/images/emotion_intimidate.png')}&#10;            /&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={{ height: 40 }} /&gt;&#10;          &lt;Text style={styles.label}&gt;너는 어느 쪽에 가까워?&lt;/Text&gt;&#10;          &lt;View style={styles.characterSelectionContainer}&gt;&#10;            &lt;CharacterSelection&#10;              onPress={() =&gt; setPersonality2('감성적')}&#10;              isSelected={personality2 === '감성적'}&#10;              image={require('@/assets/images/ideology_emotional.png')}&#10;            /&gt;&#10;            &lt;CharacterSelection&#10;              onPress={() =&gt; setPersonality2('이성적')}&#10;              isSelected={personality2 === '이성적'}&#10;              image={require('@/assets/images/ideology_reasoning.png')}&#10;            /&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;      )}&#10;&#10;      {step === 3 &amp;&amp; (&#10;        &lt;View style={styles.stepContentFinal}&gt;&#10;          &lt;Text style={[styles.finalText, styles.alignLeft]}&gt;너의 감정을 가지고&lt;/Text&gt;&#10;          &lt;Text style={[styles.finalText, styles.alignCenter]}&gt;모리가 어떤 모습으로 성장할까&lt;/Text&gt;&#10;          &lt;Text style={[styles.finalText, styles.alignRight]}&gt;감정 일기 시작해보자&lt;/Text&gt;&#10;          &lt;Image source={require('@/assets/images/mory_initial.png')} style={styles.characterPlaceholder} /&gt;&#10;        &lt;/View&gt;&#10;      )}&#10;&#10;      &lt;TouchableOpacity style={styles.nextButton} onPress={handleNext}&gt;&#10;        &lt;Text style={styles.nextButtonText}&gt;{step === TOTAL_STEPS ? '시작하기' : '다음으로'}&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    padding: 20,&#10;    backgroundColor: Colors.primaryBackground,&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    justifyContent: 'space-between',&#10;    marginBottom: 30,&#10;  },&#10;  title: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    color: Colors.white,&#10;  },&#10;  stepContent: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    width: '100%',&#10;    paddingHorizontal: 20,&#10;  },&#10;  stepContentFinal: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'flex-start',&#10;    width: '100%',&#10;    paddingHorizontal: 20,&#10;    paddingTop: 60, // 상단 여백 추가&#10;  },&#10;  stepTitle: {&#10;    fontSize: 28,&#10;    fontWeight: 'bold',&#10;    color: Colors.white,&#10;    marginBottom: 10,&#10;  },&#10;  finalText: {&#10;    fontSize: 20,&#10;    color: Colors.white,&#10;    fontWeight: '500',&#10;    textAlign: 'center',&#10;    alignSelf: 'center',&#10;    marginBottom: 18, // 줄 간격 조정&#10;  },&#10;  alignLeft: {&#10;    alignSelf: 'flex-start',&#10;    textAlign: 'left',&#10;    width: '100%',&#10;  },&#10;  alignCenter: {&#10;    alignSelf: 'center',&#10;    textAlign: 'center',&#10;    width: '100%',&#10;  },&#10;  alignRight: {&#10;    alignSelf: 'flex-end',&#10;    textAlign: 'right',&#10;    width: '100%',&#10;  },&#10;  stepSubtitle: {&#10;    fontSize: 18,&#10;    color: Colors.white,&#10;    marginBottom: 30,&#10;  },&#10;  label: {&#10;    fontSize: 16,&#10;    color: Colors.white,&#10;    marginBottom: 10,&#10;    alignSelf: 'flex-start',&#10;  },&#10;  input: {&#10;    height: 50,&#10;    width: '100%',&#10;    backgroundColor: Colors.white,&#10;    borderRadius: 8,&#10;    paddingHorizontal: 15,&#10;    marginBottom: 20,&#10;    color: Colors.black,&#10;  },&#10;  characterSelectionContainer: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'center',&#10;    marginTop: 20,&#10;    width: '100%',&#10;  },&#10;  nextButton: {&#10;    backgroundColor: Colors.secondaryBackground,&#10;    width: '100%',&#10;    paddingVertical: 15,&#10;    borderRadius: 8,&#10;    alignItems: 'center',&#10;    marginTop: 30,&#10;  },&#10;  nextButtonText: {&#10;    color: Colors.white,&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;  },&#10;  characterPlaceholder: {&#10;    width: 200,&#10;    height: 200,&#10;    resizeMode: 'contain',&#10;    marginTop: 50,&#10;  },&#10;});" />
              <option name="updatedContent" value="import { useRouter } from 'expo-router';&#10;import { useState } from 'react';&#10;import { View, Text, Button, StyleSheet, TextInput, TouchableOpacity, Image } from 'react-native';&#10;import ProgressBar from '@/components/ProgressBar';&#10;import BackButton from '@/components/BackButton';&#10;import CharacterSelection from '@/components/CharacterSelection';&#10;import { useAuth } from '@/app/context/AuthContext';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;const TOTAL_STEPS = 3;&#10;&#10;export default function InitialSetupScreen() {&#10;  const router = useRouter();&#10;  const { signIn } = useAuth();&#10;  const [step, setStep] = useState(1);&#10;  const [name, setName] = useState('');&#10;  const [personality1, setPersonality1] = useState&lt;'활발' | '소심' | null&gt;(null);&#10;  const [personality2, setPersonality2] = useState&lt;'감성적' | '이성적' | null&gt;(null);&#10;&#10;  const handleNext = () =&gt; {&#10;    if (step &lt; TOTAL_STEPS) {&#10;      setStep(step + 1);&#10;    }&#10;    else {&#10;      signIn();&#10;      router.replace('/(tabs)/');&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;ProgressBar currentStep={step} totalSteps={TOTAL_STEPS} /&gt;&#10;      &lt;View style={styles.header}&gt;&#10;        &lt;BackButton /&gt;&#10;        &lt;Text style={styles.title}&gt;Initial Setup&lt;/Text&gt;&#10;        &lt;View style={{ width: 24 }} /&gt;{/* Placeholder for alignment */}&#10;      &lt;/View&gt;&#10;&#10;      {step === 1 &amp;&amp; (&#10;        &lt;View style={styles.stepContent}&gt;&#10;          &lt;Text style={styles.stepTitle}&gt;이름&lt;/Text&gt;&#10;          &lt;Text style={styles.stepSubtitle}&gt;내가 부를 너의 이름을 알려줘&lt;/Text&gt;&#10;          &lt;Text style={styles.label}&gt;나의 이름은&lt;/Text&gt;&#10;          &lt;TextInput&#10;            style={styles.input}&#10;            placeholder=&quot;이름을 입력하세요&quot;&#10;            placeholderTextColor={Colors.lightGray}&#10;            value={name}&#10;            onChangeText={setName}&#10;          /&gt;&#10;        &lt;/View&gt;&#10;      )}&#10;&#10;      {step === 2 &amp;&amp; (&#10;        &lt;View style={styles.stepContent}&gt;&#10;          &lt;Text style={styles.stepTitle}&gt;성격&lt;/Text&gt;&#10;          &lt;Text style={styles.stepSubtitle}&gt;너의 성격을 알려줘&lt;/Text&gt;&#10;          &lt;Text style={styles.label}&gt;너는 어느 쪽에 가까워?&lt;/Text&gt;&#10;          &lt;View style={styles.characterSelectionContainer}&gt;&#10;            &lt;CharacterSelection&#10;              onPress={() =&gt; setPersonality1('활발')}&#10;              isSelected={personality1 === '활발'}&#10;              image={require('@/assets/images/emotion_active.png')}&#10;            /&gt;&#10;            &lt;CharacterSelection&#10;              onPress={() =&gt; setPersonality1('소심')}&#10;              isSelected={personality1 === '소심'}&#10;              image={require('@/assets/images/emotion_intimidate.png')}&#10;            /&gt;&#10;          &lt;/View&gt;&#10;          &lt;View style={{ height: 40 }} /&gt;&#10;          &lt;Text style={styles.label}&gt;너는 어느 쪽에 가까워?&lt;/Text&gt;&#10;          &lt;View style={styles.characterSelectionContainer}&gt;&#10;            &lt;CharacterSelection&#10;              onPress={() =&gt; setPersonality2('감성적')}&#10;              isSelected={personality2 === '감성적'}&#10;              image={require('@/assets/images/ideology_emotional.png')}&#10;            /&gt;&#10;            &lt;CharacterSelection&#10;              onPress={() =&gt; setPersonality2('이성적')}&#10;              isSelected={personality2 === '이성적'}&#10;              image={require('@/assets/images/ideology_reasoning.png')}&#10;            /&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;      )}&#10;&#10;      {step === 3 &amp;&amp; (&#10;        &lt;View style={styles.stepContentFinal}&gt;&#10;          &lt;Text style={[styles.finalText, styles.alignLeft]}&gt;너의 감정을 가지고&lt;/Text&gt;&#10;          &lt;Text style={[styles.finalText, styles.alignRight]}&gt;모리가 어떤 모습으로 성장할까&lt;/Text&gt;&#10;          &lt;Text style={[styles.finalText, styles.alignLeft]}&gt;감정 일기 시작해보자&lt;/Text&gt;&#10;          &lt;Image source={require('@/assets/images/mory_initial.png')} style={styles.characterPlaceholder} /&gt;&#10;        &lt;/View&gt;&#10;      )}&#10;&#10;      &lt;TouchableOpacity style={styles.nextButton} onPress={handleNext}&gt;&#10;        &lt;Text style={styles.nextButtonText}&gt;{step === TOTAL_STEPS ? '시작하기' : '다음으로'}&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    padding: 20,&#10;    backgroundColor: Colors.primaryBackground,&#10;  },&#10;  header: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    justifyContent: 'space-between',&#10;    marginBottom: 30,&#10;  },&#10;  title: {&#10;    fontSize: 24,&#10;    fontWeight: 'bold',&#10;    color: Colors.white,&#10;  },&#10;  stepContent: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    width: '100%',&#10;    paddingHorizontal: 20,&#10;  },&#10;  stepContentFinal: {&#10;    flex: 1,&#10;    alignItems: 'center',&#10;    justifyContent: 'flex-start',&#10;    width: '100%',&#10;    paddingHorizontal: 20,&#10;    paddingTop: 60, // 상단 여백 추가&#10;  },&#10;  stepTitle: {&#10;    fontSize: 28,&#10;    fontWeight: 'bold',&#10;    color: Colors.white,&#10;    marginBottom: 10,&#10;  },&#10;  finalText: {&#10;    fontSize: 20,&#10;    color: Colors.white,&#10;    fontWeight: '500',&#10;    textAlign: 'center',&#10;    alignSelf: 'center',&#10;    marginBottom: 18, // 줄 간격 조정&#10;  },&#10;  alignLeft: {&#10;    alignSelf: 'flex-start',&#10;    textAlign: 'left',&#10;    width: '100%',&#10;  },&#10;  alignCenter: {&#10;    alignSelf: 'center',&#10;    textAlign: 'center',&#10;    width: '100%',&#10;  },&#10;  alignRight: {&#10;    alignSelf: 'flex-end',&#10;    textAlign: 'right',&#10;    width: '100%',&#10;  },&#10;  stepSubtitle: {&#10;    fontSize: 18,&#10;    color: Colors.white,&#10;    marginBottom: 30,&#10;  },&#10;  label: {&#10;    fontSize: 16,&#10;    color: Colors.white,&#10;    marginBottom: 10,&#10;    alignSelf: 'flex-start',&#10;  },&#10;  input: {&#10;    height: 50,&#10;    width: '100%',&#10;    backgroundColor: Colors.white,&#10;    borderRadius: 8,&#10;    paddingHorizontal: 15,&#10;    marginBottom: 20,&#10;    color: Colors.black,&#10;  },&#10;  characterSelectionContainer: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'center',&#10;    marginTop: 20,&#10;    width: '100%',&#10;  },&#10;  nextButton: {&#10;    backgroundColor: Colors.secondaryBackground,&#10;    width: '100%',&#10;    paddingVertical: 15,&#10;    borderRadius: 8,&#10;    alignItems: 'center',&#10;    marginTop: 30,&#10;  },&#10;  nextButtonText: {&#10;    color: Colors.white,&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;  },&#10;  characterPlaceholder: {&#10;    width: 200,&#10;    height: 200,&#10;    resizeMode: 'contain',&#10;    marginTop: 50,&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/(tabs)/profile.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/(tabs)/profile.tsx" />
              <option name="originalContent" value="import { View, Text, StyleSheet } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;import ProfileAvatar from '@/components/profile/ProfileAvatar';&#10;import ProfileInfo from '@/components/profile/ProfileInfo';&#10;import ProfileMenu from '@/components/profile/ProfileMenu';&#10;&#10;export const options = { headerShown: false };&#10;&#10;export default function ProfileScreen() {&#10;  // 임시 데이터&#10;  const user = {&#10;    name: '조영찬',&#10;    email: 'choyoung0711@gamil.com',&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;Text style={styles.title}&gt;프로필&lt;/Text&gt;&#10;      &lt;ProfileAvatar /&gt;&#10;      &lt;View style={styles.profileInfoBox}&gt;&#10;        &lt;ProfileInfo user={user} /&gt;&#10;        &lt;ProfileMenu /&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#003B68',&#10;    alignItems: 'center',&#10;  },&#10;  title: {&#10;    fontSize: 28,&#10;    fontWeight: 'bold',&#10;    color: Colors.white,&#10;    alignSelf: 'flex-start',&#10;    marginTop: 40,&#10;    marginLeft: 24,&#10;    marginBottom: 8,&#10;  },&#10;  profileInfoBox: {&#10;    backgroundColor: '#072B4B',&#10;    borderTopLeftRadius: 32,&#10;    borderTopRightRadius: 32,&#10;    width: '100%',&#10;    alignItems: 'center',&#10;    paddingTop: 24,&#10;    paddingBottom: 32,&#10;    marginTop: 0,&#10;    flex: 1,&#10;  },&#10;});&#10;&#10;" />
              <option name="updatedContent" value="import { View, Text, StyleSheet } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;import ProfileAvatar from '@/components/profile/ProfileAvatar';&#10;import ProfileInfo from '@/components/profile/ProfileInfo';&#10;import ProfileMenu from '@/components/profile/ProfileMenu';&#10;&#10;export const options = { headerShown: false };&#10;&#10;export default function ProfileScreen() {&#10;  // 임시 데이터&#10;  const user = {&#10;    name: '조영찬',&#10;    email: 'choyoung0711@gamil.com',&#10;  };&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;Text style={styles.title}&gt;프로필&lt;/Text&gt;&#10;      &lt;ProfileAvatar /&gt;&#10;      &lt;View style={styles.profileInfoBox}&gt;&#10;        &lt;ProfileInfo user={user} /&gt;&#10;        &lt;ProfileMenu /&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: '#003B68',&#10;    alignItems: 'center',&#10;  },&#10;  title: {&#10;    fontSize: 28,&#10;    fontWeight: 'bold',&#10;    color: Colors.white,&#10;    alignSelf: 'flex-start',&#10;    marginTop: 40,&#10;    marginLeft: 24,&#10;    marginBottom: 8,&#10;  },&#10;  profileInfoBox: {&#10;    backgroundColor: '#072B4B',&#10;    borderTopLeftRadius: 32,&#10;    borderTopRightRadius: 32,&#10;    width: '100%',&#10;    alignItems: 'center',&#10;    paddingTop: 24,&#10;    paddingBottom: 32,&#10;    marginTop: 0,&#10;    flex: 1,&#10;  },&#10;  menuRow: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    width: '80%',&#10;    paddingVertical: 18,&#10;    borderBottomWidth: 1,&#10;    borderBottomColor: '#2B4A6F',&#10;    marginBottom: 0,&#10;  },&#10;  withdrawRow: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    width: '80%',&#10;    paddingVertical: 18,&#10;    marginBottom: 0,&#10;  },&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/profile/ProfileInfo.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/profile/ProfileInfo.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity, Image } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;interface ProfileInfoProps {&#10;  name: string;&#10;  email: string;&#10;  personality: string;&#10;  onEdit: () =&gt; void;&#10;}&#10;&#10;export default function ProfileInfo({ name, email, personality, onEdit }: ProfileInfoProps) {&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;View style={styles.avatarContainer}&gt;&#10;        &lt;Image source={require('@/assets/images/mory_initial.png')} style={styles.avatar} /&gt;&#10;        &lt;TouchableOpacity style={styles.editButton} onPress={onEdit}&gt;&#10;          &lt;Image source={require('@/assets/icons/write.svg')} style={styles.editIcon} /&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;      &lt;/View&gt;&#10;      &lt;Text style={styles.name}&gt;{name}&lt;/Text&gt;&#10;      &lt;Text style={styles.email}&gt;{email}&lt;/Text&gt;&#10;      &lt;View style={styles.personalityRow}&gt;&#10;        &lt;Text style={styles.personalityLabel}&gt;성격&lt;/Text&gt;&#10;        &lt;Text style={styles.personalityValue}&gt;{personality}&lt;/Text&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    backgroundColor: '#072B4B',&#10;    borderTopLeftRadius: 32,&#10;    borderTopRightRadius: 32,&#10;    alignItems: 'center',&#10;    paddingTop: 24,&#10;    paddingBottom: 32,&#10;    width: '100%',&#10;    marginTop: 24,&#10;  },&#10;  avatarContainer: {&#10;    position: 'relative',&#10;    marginBottom: 0,&#10;    marginTop: -40, // 위로 올림&#10;  },&#10;  avatar: {&#10;    width: 180,&#10;    height: 180,&#10;    resizeMode: 'contain',&#10;  },&#10;  editButton: {&#10;    position: 'absolute',&#10;    right: 16,&#10;    bottom: 16,&#10;    backgroundColor: '#FFE600',&#10;    borderRadius: 16,&#10;    width: 32,&#10;    height: 32,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    zIndex: 2,&#10;  },&#10;  editIcon: {&#10;    width: 18,&#10;    height: 18,&#10;    tintColor: '#003B68',&#10;  },&#10;  name: {&#10;    fontSize: 22,&#10;    fontWeight: 'bold',&#10;    color: Colors.white,&#10;    marginTop: 0,&#10;    marginBottom: 4,&#10;  },&#10;  email: {&#10;    fontSize: 13,&#10;    color: '#B0B8C1',&#10;  },&#10;  personalityRow: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    width: '80%',&#10;    borderBottomWidth: 1,&#10;    borderBottomColor: '#2B4A6F',&#10;    paddingBottom: 12,&#10;    marginBottom: 8,&#10;  },&#10;  personalityLabel: {&#10;    color: '#B0B8C1',&#10;    fontSize: 15,&#10;    fontWeight: '500',&#10;  },&#10;  personalityValue: {&#10;    color: Colors.white,&#10;    fontSize: 15,&#10;    fontWeight: '500',&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { View, Text, StyleSheet, TouchableOpacity, Image } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;interface ProfileInfoProps {&#10;  name: string;&#10;  email: string;&#10;  personality: string;&#10;  onEdit: () =&gt; void;&#10;}&#10;&#10;export default function ProfileInfo({ name, email, personality, onEdit }: ProfileInfoProps) {&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      &lt;View style={styles.avatarContainer}&gt;&#10;        &lt;Image source={require('@/assets/images/mory_initial.png')} style={styles.avatar} /&gt;&#10;        &lt;TouchableOpacity style={styles.editButton} onPress={onEdit}&gt;&#10;          &lt;Image source={require('@/assets/icons/write.svg')} style={styles.editIcon} /&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;      &lt;/View&gt;&#10;      &lt;Text style={styles.name}&gt;{name}&lt;/Text&gt;&#10;      &lt;Text style={styles.email}&gt;{email}&lt;/Text&gt;&#10;      &lt;View style={styles.personalityRow}&gt;&#10;        &lt;Text style={styles.personalityLabel}&gt;성격&lt;/Text&gt;&#10;        &lt;Text style={styles.personalityValue}&gt;{personality}&lt;/Text&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    backgroundColor: '#072B4B',&#10;    borderTopLeftRadius: 32,&#10;    borderTopRightRadius: 32,&#10;    alignItems: 'center',&#10;    paddingTop: 24,&#10;    paddingBottom: 32,&#10;    width: '100%',&#10;    marginTop: 24,&#10;  },&#10;  avatarContainer: {&#10;    position: 'relative',&#10;    marginBottom: 8,&#10;  },&#10;  avatar: {&#10;    width: 180,&#10;    height: 180,&#10;    resizeMode: 'contain',&#10;  },&#10;  editButton: {&#10;    position: 'absolute',&#10;    right: 8,&#10;    bottom: 8,&#10;    backgroundColor: '#FFE600',&#10;    borderRadius: 16,&#10;    width: 32,&#10;    height: 32,&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    zIndex: 2,&#10;  },&#10;  name: {&#10;    fontSize: 22,&#10;    fontWeight: 'bold',&#10;    color: Colors.white,&#10;    marginTop: 8,&#10;  },&#10;  email: {&#10;    fontSize: 13,&#10;    color: '#B0B8C1',&#10;    marginBottom: 16,&#10;  },&#10;  personalityRow: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    width: '80%',&#10;    borderBottomWidth: 1,&#10;    borderBottomColor: '#2B4A6F',&#10;    paddingBottom: 12,&#10;    marginBottom: 8,&#10;  },&#10;  personalityLabel: {&#10;    color: '#B0B8C1',&#10;    fontSize: 15,&#10;    fontWeight: '500',&#10;  },&#10;  personalityValue: {&#10;    color: Colors.white,&#10;    fontSize: 15,&#10;    fontWeight: '500',&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/profile/ProfileMenu.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/profile/ProfileMenu.tsx" />
              <option name="originalContent" value="import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;export default function ProfileMenu({ onLogout, onWithdraw }: any) {&#10;  return (&#10;    &lt;View style={styles.menuContainer}&gt;&#10;      &lt;TouchableOpacity style={styles.menuItem} onPress={onLogout}&gt;&#10;        &lt;Text style={styles.menuText}&gt;로그아웃&lt;/Text&gt;&#10;        &lt;Text style={styles.arrow}&gt;{'&gt;'}&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;      &lt;TouchableOpacity style={styles.menuItem} onPress={onWithdraw}&gt;&#10;        &lt;Text style={styles.withdrawText}&gt;회원탈퇴&lt;/Text&gt;&#10;        &lt;Text style={styles.arrow}&gt;{'&gt;'}&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  menuContainer: {&#10;    width: '100%',&#10;    marginTop: 16,&#10;  },&#10;  menuItem: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    width: '80%',&#10;    paddingVertical: 18,&#10;    borderBottomWidth: 1,&#10;    borderBottomColor: '#2B4A6F',&#10;    marginLeft: '10%',&#10;  },&#10;  menuText: {&#10;    color: Colors.white,&#10;    fontSize: 16,&#10;  },&#10;  withdrawText: {&#10;    color: '#FF5A5A',&#10;    fontSize: 16,&#10;  },&#10;  arrow: {&#10;    color: '#B0B8C1',&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;  },&#10;});" />
              <option name="updatedContent" value="import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';&#10;import { Colors } from '@/constants/Colors';&#10;&#10;export default function ProfileMenu({ onLogout, onWithdraw }: any) {&#10;  return (&#10;    &lt;View style={styles.menuContainer}&gt;&#10;      &lt;TouchableOpacity style={styles.menuItem} onPress={onLogout}&gt;&#10;        &lt;Text style={styles.menuText}&gt;로그아웃&lt;/Text&gt;&#10;        &lt;Text style={styles.arrow}&gt;{'&gt;'}&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;      &lt;TouchableOpacity style={styles.menuItem} onPress={onWithdraw}&gt;&#10;        &lt;Text style={styles.withdrawText}&gt;회원탈퇴&lt;/Text&gt;&#10;        &lt;Text style={styles.arrow}&gt;{'&gt;'}&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  menuContainer: {&#10;    width: '100%',&#10;    marginTop: 16,&#10;  },&#10;  menuItem: {&#10;    flexDirection: 'row',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    width: '90%', // 여백 줄임&#10;    paddingVertical: 12, // 상하 여백 줄임&#10;    borderBottomWidth: 1,&#10;    borderBottomColor: '#2B4A6F',&#10;    marginLeft: '5%', // 좌우 여백 줄임&#10;  },&#10;  menuText: {&#10;    color: Colors.white,&#10;    fontSize: 16,&#10;  },&#10;  withdrawText: {&#10;    color: '#FF5A5A',&#10;    fontSize: 16,&#10;  },&#10;  arrow: {&#10;    color: '#B0B8C1',&#10;    fontSize: 18,&#10;    fontWeight: 'bold',&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>