<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/(tabs)/profile.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/(tabs)/profile.tsx" />
              <option name="originalContent" value="import { Text, View, StyleSheet, TouchableOpacity, Image, Alert } from 'react-native';&#10;import { useAuth } from '@/app/context/AuthContext';&#10;import { useState, useEffect } from 'react';&#10;import { MaterialIcons } from '@expo/vector-icons';&#10;import { Theme } from '@/constants/Themes';&#10;import axios from 'axios';&#10;import AsyncStorage from '@react-native-async-storage/async-storage';&#10;&#10;const API_BASE_URL = 'https://mory-backend-production.up.railway.app';&#10;&#10;export default function ProfileScreen() {&#10;  const { getUserInfo, signOut } = useAuth();&#10;  const [userInfo, setUserInfo] = useState&lt;any&gt;(null);&#10;&#10;  useEffect(() =&gt; {&#10;    const fetchUserInfo = async () =&gt; {&#10;      const info = await getUserInfo();&#10;      setUserInfo(info);&#10;    };&#10;    fetchUserInfo();&#10;  }, []);&#10;&#10;  const handleSignOut = async () =&gt; {&#10;    try {&#10;      await signOut();&#10;    } catch (error) {&#10;      Alert.alert('오류', '로그아웃에 실패했습니다.');&#10;    }&#10;  };&#10;&#10;  const handleWithdraw = async () =&gt; {&#10;    Alert.alert(&#10;      '회원탈퇴',&#10;      '정말로 회원탈퇴 하시겠습니까? 모든 데이터가 삭제됩니다.',&#10;      [&#10;        { text: '취소', style: 'cancel' },&#10;        {&#10;          text: '탈퇴',&#10;          onPress: async () =&gt; {&#10;            try {&#10;              const accessToken = await AsyncStorage.getItem('accessToken');&#10;              if (!accessToken) throw new Error('No access token found');&#10;              await axios.delete(`${API_BASE_URL}/auth/me`, {&#10;                headers: { Authorization: `Bearer ${accessToken}` },&#10;              });&#10;              await signOut();&#10;              Alert.alert('성공', '회원탈퇴가 완료되었습니다.');&#10;            } catch (error) {&#10;              Alert.alert('오류', '회원탈퇴에 실패했습니다.');&#10;            }&#10;          },&#10;          style: 'destructive',&#10;        },&#10;      ],&#10;      { cancelable: true }&#10;    );&#10;  };&#10;&#10;  if (!userInfo) {&#10;    return (&#10;      &lt;View style={styles.container}&gt;&#10;        &lt;Text style={styles.loadingText}&gt;사용자 정보를 불러오는 중...&lt;/Text&gt;&#10;      &lt;/View&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {/* 상단 배경 */}&#10;      &lt;View style={styles.headerBackground}&gt;&#10;        &lt;Text style={styles.headerTitle}&gt;프로필&lt;/Text&gt;&#10;        &lt;View style={styles.avatarContainer}&gt;&#10;          &lt;Image&#10;            source={require('@/assets/images/default_avatar.png')}&#10;            style={styles.avatar}&#10;          /&gt;&#10;          &lt;TouchableOpacity style={styles.editIcon}&gt;&#10;            &lt;MaterialIcons name=&quot;edit&quot; size={22} color=&quot;#222&quot; /&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;        &lt;/View&gt;&#10;      &lt;/View&gt;&#10;&#10;      {/* 하단 카드 */}&#10;      &lt;View style={styles.card}&gt;&#10;        &lt;Text style={styles.name}&gt;{userInfo.name}&lt;/Text&gt;&#10;        &lt;Text style={styles.email}&gt;{userInfo.email}&lt;/Text&gt;&#10;&#10;        &lt;View style={styles.traitRow}&gt;&#10;          &lt;Text style={styles.traitLabel}&gt;성격&lt;/Text&gt;&#10;          &lt;Text style={styles.traitValue}&gt;활발하고 감성적&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;&#10;        &lt;View style={styles.divider} /&gt;&#10;&#10;        &lt;TouchableOpacity style={styles.menuRow} onPress={handleSignOut}&gt;&#10;          &lt;Text style={styles.menuText}&gt;로그아웃&lt;/Text&gt;&#10;          &lt;MaterialIcons name=&quot;chevron-right&quot; size={22} color={Theme.colors.lightGray} /&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;        &lt;View style={styles.divider} /&gt;&#10;&#10;        &lt;TouchableOpacity style={styles.menuRow} onPress={handleWithdraw}&gt;&#10;          &lt;Text style={styles.withdrawText}&gt;회원탈퇴&lt;/Text&gt;&#10;          &lt;MaterialIcons name=&quot;chevron-right&quot; size={22} color={Theme.colors.lightGray} /&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: Theme.colors.primaryBackground,&#10;  },&#10;  headerBackground: {&#10;    backgroundColor: Theme.colors.primaryBackground,&#10;    paddingTop: 56,&#10;    paddingBottom: 24,&#10;    alignItems: 'center',&#10;    borderBottomLeftRadius: 32,&#10;    borderBottomRightRadius: 32,&#10;  },&#10;  card: {&#10;    backgroundColor: Theme.colors.primaryBackground,&#10;    marginHorizontal: 0,&#10;    marginTop: -16,&#10;    borderTopLeftRadius: 32,&#10;    borderTopRightRadius: 32,&#10;    paddingTop: 32,&#10;    alignItems: 'center',&#10;    flex: 1,&#10;  },&#10;  headerTitle: {&#10;    color: '#fff',&#10;    fontSize: 28,&#10;    fontWeight: 'bold',&#10;    alignSelf: 'flex-start',&#10;    marginLeft: 24,&#10;    marginBottom: 12,&#10;  },&#10;  avatarContainer: {&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    marginTop: 8,&#10;  },&#10;  avatar: {&#10;    width: 110,&#10;    height: 110,&#10;    borderRadius: 55,&#10;    backgroundColor: '#fff',&#10;  },&#10;  editIcon: {&#10;    position: 'absolute',&#10;    right: -6,&#10;    bottom: 6,&#10;    backgroundColor: '#FFE600',&#10;    borderRadius: 16,&#10;    padding: 6,&#10;    borderWidth: 2,&#10;    borderColor: '#fff',&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    elevation: 2,&#10;  },&#10;  name: {&#10;    color: Theme.colors.white,&#10;    fontSize: Theme.fontSizes.xLarge,&#10;    fontWeight: 'bold',&#10;    marginBottom: 2,&#10;  },&#10;  email: {&#10;    color: Theme.colors.lightGray,&#10;    fontSize: Theme.fontSizes.medium,&#10;    marginBottom: 24,&#10;  },&#10;  traitRow: {&#10;    flexDirection: 'row',&#10;    width: '85%',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    marginBottom: 8,&#10;  },&#10;  traitLabel: {&#10;    color: '#B0C4DE',&#10;    fontSize: 15,&#10;    fontWeight: 'bold',&#10;  },&#10;  traitValue: {&#10;    color: '#fff',&#10;    fontSize: 15,&#10;    fontWeight: '500',&#10;  },&#10;  divider: {&#10;    width: '90%',&#10;    height: 1,&#10;    backgroundColor: '#2C4766',&#10;    alignSelf: 'center',&#10;    marginVertical: 6,&#10;  },&#10;  menuRow: {&#10;    flexDirection: 'row',&#10;    width: '90%',&#10;    alignItems: 'center',&#10;    justifyContent: 'space-between',&#10;    paddingVertical: 14,&#10;  },&#10;  menuText: {&#10;    color: '#fff',&#10;    fontSize: 16,&#10;  },&#10;  withdrawText: {&#10;    color: '#FF6B6B',&#10;    fontSize: 16,&#10;  },&#10;  loadingText: {&#10;    color: '#fff',&#10;    fontSize: 16,&#10;    marginTop: 40,&#10;  },&#10;});" />
              <option name="updatedContent" value="import { Text, View, StyleSheet, TouchableOpacity, Image, Alert } from 'react-native';&#10;import { useAuth } from '@/app/context/AuthContext';&#10;import { useState, useEffect } from 'react';&#10;import { MaterialIcons } from '@expo/vector-icons';&#10;import { Theme } from '@/constants/Themes';&#10;import axios from 'axios';&#10;import AsyncStorage from '@react-native-async-storage/async-storage';&#10;&#10;const API_BASE_URL = 'https://mory-backend-production.up.railway.app';&#10;&#10;export default function ProfileScreen() {&#10;  const { getUserInfo, signOut } = useAuth();&#10;  const [userInfo, setUserInfo] = useState&lt;any&gt;(null);&#10;&#10;  useEffect(() =&gt; {&#10;    const fetchUserInfo = async () =&gt; {&#10;      const info = await getUserInfo();&#10;      setUserInfo(info);&#10;    };&#10;    fetchUserInfo();&#10;  }, []);&#10;&#10;  const handleSignOut = async () =&gt; {&#10;    try {&#10;      await signOut();&#10;    } catch (error) {&#10;      Alert.alert('오류', '로그아웃에 실패했습니다.');&#10;    }&#10;  };&#10;&#10;  const handleWithdraw = async () =&gt; {&#10;    Alert.alert(&#10;      '회원탈퇴',&#10;      '정말로 회원탈퇴 하시겠습니까? 모든 데이터가 삭제됩니다.',&#10;      [&#10;        { text: '취소', style: 'cancel' },&#10;        {&#10;          text: '탈퇴',&#10;          onPress: async () =&gt; {&#10;            try {&#10;              const accessToken = await AsyncStorage.getItem('accessToken');&#10;              if (!accessToken) throw new Error('No access token found');&#10;              await axios.delete(`${API_BASE_URL}/auth/me`, {&#10;                headers: { Authorization: `Bearer ${accessToken}` },&#10;              });&#10;              await signOut();&#10;              Alert.alert('성공', '회원탈퇴가 완료되었습니다.');&#10;            } catch (error) {&#10;              Alert.alert('오류', '회원탈퇴에 실패했습니다.');&#10;            }&#10;          },&#10;          style: 'destructive',&#10;        },&#10;      ],&#10;      { cancelable: true }&#10;    );&#10;  };&#10;&#10;  if (!userInfo) {&#10;    return (&#10;      &lt;View style={styles.container}&gt;&#10;        &lt;Text style={styles.loadingText}&gt;사용자 정보를 불러오는 중...&lt;/Text&gt;&#10;      &lt;/View&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;View style={styles.container}&gt;&#10;      {/* 상단 배경 */}&#10;      &lt;View style={styles.headerBackground}&gt;&#10;        &lt;Text style={styles.headerTitle}&gt;프로필&lt;/Text&gt;&#10;        &lt;View style={styles.avatarContainer}&gt;&#10;          &lt;Image&#10;            source={require('@/reference/프로필.png')}&#10;            style={styles.avatar}&#10;          /&gt;&#10;          &lt;TouchableOpacity style={styles.editIcon}&gt;&#10;            &lt;MaterialIcons name=&quot;edit&quot; size={22} color=&quot;#222&quot; /&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;        &lt;/View&gt;&#10;      &lt;/View&gt;&#10;&#10;      {/* 하단 카드 */}&#10;      &lt;View style={styles.card}&gt;&#10;        &lt;Text style={styles.name}&gt;{userInfo.name}&lt;/Text&gt;&#10;        &lt;Text style={styles.email}&gt;{userInfo.email}&lt;/Text&gt;&#10;&#10;        &lt;View style={styles.traitRow}&gt;&#10;          &lt;Text style={styles.traitLabel}&gt;성격&lt;/Text&gt;&#10;          &lt;Text style={styles.traitValue}&gt;활발하고 감성적&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;&#10;        &lt;View style={styles.divider} /&gt;&#10;&#10;        &lt;TouchableOpacity style={styles.menuRow} onPress={handleSignOut}&gt;&#10;          &lt;Text style={styles.menuText}&gt;로그아웃&lt;/Text&gt;&#10;          &lt;MaterialIcons name=&quot;chevron-right&quot; size={22} color={Theme.colors.lightGray} /&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;        &lt;View style={styles.divider} /&gt;&#10;&#10;        &lt;TouchableOpacity style={styles.menuRow} onPress={handleWithdraw}&gt;&#10;          &lt;Text style={styles.withdrawText}&gt;회원탈퇴&lt;/Text&gt;&#10;          &lt;MaterialIcons name=&quot;chevron-right&quot; size={22} color={Theme.colors.lightGray} /&gt;&#10;        &lt;/TouchableOpacity&gt;&#10;      &lt;/View&gt;&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  container: {&#10;    flex: 1,&#10;    backgroundColor: Theme.colors.primaryBackground,&#10;  },&#10;  headerBackground: {&#10;    backgroundColor: Theme.colors.primaryBackground,&#10;    paddingTop: 56,&#10;    paddingBottom: 24,&#10;    alignItems: 'center',&#10;    borderBottomLeftRadius: 32,&#10;    borderBottomRightRadius: 32,&#10;  },&#10;  card: {&#10;    backgroundColor: Theme.colors.primaryBackground,&#10;    marginHorizontal: 0,&#10;    marginTop: -16,&#10;    borderTopLeftRadius: 32,&#10;    borderTopRightRadius: 32,&#10;    paddingTop: 32,&#10;    alignItems: 'center',&#10;    flex: 1,&#10;  },&#10;  headerTitle: {&#10;    color: '#fff',&#10;    fontSize: 28,&#10;    fontWeight: 'bold',&#10;    alignSelf: 'flex-start',&#10;    marginLeft: 24,&#10;    marginBottom: 12,&#10;  },&#10;  avatarContainer: {&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    marginTop: 8,&#10;  },&#10;  avatar: {&#10;    width: 110,&#10;    height: 110,&#10;    borderRadius: 55,&#10;    backgroundColor: '#fff',&#10;  },&#10;  editIcon: {&#10;    position: 'absolute',&#10;    right: -6,&#10;    bottom: 6,&#10;    backgroundColor: '#FFE600',&#10;    borderRadius: 16,&#10;    padding: 6,&#10;    borderWidth: 2,&#10;    borderColor: '#fff',&#10;    alignItems: 'center',&#10;    justifyContent: 'center',&#10;    elevation: 2,&#10;  },&#10;  name: {&#10;    color: Theme.colors.white,&#10;    fontSize: Theme.fontSizes.xLarge,&#10;    fontWeight: 'bold',&#10;    marginBottom: 2,&#10;  },&#10;  email: {&#10;    color: Theme.colors.lightGray,&#10;    fontSize: Theme.fontSizes.medium,&#10;    marginBottom: 24,&#10;  },&#10;  traitRow: {&#10;    flexDirection: 'row',&#10;    width: '85%',&#10;    justifyContent: 'space-between',&#10;    alignItems: 'center',&#10;    marginBottom: 8,&#10;  },&#10;  traitLabel: {&#10;    color: '#B0C4DE',&#10;    fontSize: 15,&#10;    fontWeight: 'bold',&#10;  },&#10;  traitValue: {&#10;    color: '#fff',&#10;    fontSize: 15,&#10;    fontWeight: '500',&#10;  },&#10;  divider: {&#10;    width: '90%',&#10;    height: 1,&#10;    backgroundColor: '#2C4766',&#10;    alignSelf: 'center',&#10;    marginVertical: 6,&#10;  },&#10;  menuRow: {&#10;    flexDirection: 'row',&#10;    width: '90%',&#10;    alignItems: 'center',&#10;    justifyContent: 'space-between',&#10;    paddingVertical: 14,&#10;  },&#10;  menuText: {&#10;    color: '#fff',&#10;    fontSize: 16,&#10;  },&#10;  withdrawText: {&#10;    color: '#FF6B6B',&#10;    fontSize: 16,&#10;  },&#10;  loadingText: {&#10;    color: '#fff',&#10;    fontSize: 16,&#10;    marginTop: 40,&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/_layout.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/_layout.tsx" />
              <option name="originalContent" value="import { Stack, useRouter } from 'expo-router';&#10;import { StatusBar } from 'expo-status-bar';&#10;import 'react-native-reanimated';&#10;import { useState, useMemo, useEffect } from 'react';&#10;import AsyncStorage from '@react-native-async-storage/async-storage';&#10;import { ActivityIndicator, View } from 'react-native';&#10;import axios from 'axios';&#10;import * as WebBrowser from 'expo-web-browser';&#10;import * as Google from 'expo-auth-session/providers/google';&#10;&#10;import { AuthContext } from '@/app/context/AuthContext';&#10;import { Theme } from '@/constants/Themes';&#10;&#10;const API_BASE_URL = 'https://mory-backend-production.up.railway.app';&#10;&#10;WebBrowser.maybeCompleteAuthSession();&#10;&#10;WebBrowser.maybeCompleteAuthSession();&#10;&#10;export default function RootLayout() {&#10;  const router = useRouter();&#10;  const [isSignedIn, setIsSignedIn] = useState&lt;boolean | null&gt;(null);&#10;  const [loading, setLoading] = useState(true);&#10;&#10;  const [request, response, promptAsync] = Google.useAuthRequest({&#10;    clientId: process.env.EXPO_PUBLIC_GOOGLE_CLIENT_ID_WEB,&#10;    redirectUri: AuthSession.makeRedirectUri({ useProxy: true }),&#10;  });&#10;&#10;  useEffect(() =&gt; {&#10;    const loadSignInStatus = async () =&gt; {&#10;      try {&#10;        const storedStatus = await AsyncStorage.getItem('isSignedIn');&#10;        if (storedStatus !== null) {&#10;          setIsSignedIn(JSON.parse(storedStatus));&#10;        } else {&#10;          setIsSignedIn(false);&#10;        }&#10;      } catch (e) {&#10;        console.error('Failed to load sign-in status', e);&#10;        setIsSignedIn(false);&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    };&#10;&#10;    loadSignInStatus();&#10;  }, []);&#10;&#10;  useEffect(() =&gt; {&#10;    if (response?.type === 'success') {&#10;      const { params } = response;&#10;      const status = params.status;&#10;      const value = params.value;&#10;&#10;      if (status === 'login' &amp;&amp; value) {&#10;        const { accessToken } = JSON.parse(decodeURIComponent(value));&#10;        AsyncStorage.setItem('accessToken', accessToken);&#10;        AsyncStorage.setItem('isSignedIn', JSON.stringify(true));&#10;        setIsSignedIn(true);&#10;        router.replace('/(tabs)/');&#10;      } else if (status === 'register' &amp;&amp; value) {&#10;        const { email, name, provider } = JSON.parse(decodeURIComponent(value));&#10;        router.replace({&#10;          pathname: '/signup',&#10;          params: { email, name, provider },&#10;        });&#10;      }&#10;    }&#10;  }, [response]);&#10;&#10;  const authContext = useMemo(&#10;    () =&gt; ({&#10;      signIn: async (username: any, password: any) =&gt; {&#10;        try {&#10;          const response = await axios.post(`${API_BASE_URL}/auth/login`, {&#10;            email: username,&#10;            password,&#10;          });&#10;          const { accessToken } = response.data;&#10;          await AsyncStorage.setItem('accessToken', accessToken);&#10;          await AsyncStorage.setItem('isSignedIn', JSON.stringify(true));&#10;          setIsSignedIn(true);&#10;        } catch (error) {&#10;          if (axios.isAxiosError(error) &amp;&amp; error.response) {&#10;            console.error('Login failed:', error.response.data);&#10;            throw new Error(error.response.data.message || '로그인에 실패했습니다.');&#10;          } else {&#10;            console.error('Login failed:', error);&#10;            throw error;&#10;          }&#10;        }&#10;      },&#10;      googleSignIn: async () =&gt; {&#10;        if (request &amp;&amp; request.loaded) {&#10;          await promptAsync();&#10;        } else {&#10;          console.warn('Google auth request not ready yet.');&#10;        }&#10;      },&#10;      signOut: async () =&gt; {&#10;        setIsSignedIn(false);&#10;        await AsyncStorage.removeItem('isSignedIn');&#10;        await AsyncStorage.removeItem('accessToken');&#10;      },&#10;      signUp: async (name: any, email: any, password: any, mbti: any, provider: any) =&gt; {&#10;        try {&#10;          const response = await axios.post(`${API_BASE_URL}/auth/register`, {&#10;            email,&#10;            name,&#10;            password,&#10;            mbti: mbti || 'EF',&#10;            provider: provider || 'local',&#10;          });&#10;          await AsyncStorage.setItem('isSignedIn', JSON.stringify(true));&#10;          setIsSignedIn(true);&#10;        } catch (error) {&#10;          if (axios.isAxiosError(error) &amp;&amp; error.response) {&#10;            console.error('Sign up failed:', error.response.data);&#10;            throw new Error(error.response.data.message || '회원가입에 실패했습니다.');&#10;          } else {&#10;            console.error('Sign up failed:', error);&#10;            throw error;&#10;          }&#10;        }&#10;      },&#10;      updateProfile: async (mbti: string) =&gt; {&#10;        try {&#10;          const accessToken = await AsyncStorage.getItem('accessToken');&#10;          if (!accessToken) {&#10;            throw new Error('No access token found');&#10;          }&#10;          await axios.patch(`${API_BASE_URL}/auth`, &#10;            { mbti },&#10;            { headers: { Authorization: `Bearer ${accessToken}` } }&#10;          );&#10;        } catch (error) {&#10;          console.error('Profile update failed:', error);&#10;          throw error;&#10;        }&#10;      },&#10;      getUserInfo: async () =&gt; {&#10;        // 로그인 기능이 작동하지 않을 때 임시로 사용할 사용자 정보&#10;        return {&#10;          name: &quot;테스트 사용자&quot;,&#10;          email: &quot;test@example.com&quot;,&#10;          mbti: &quot;EF&quot;, // 임의의 MBTI&#10;        };&#10;      },&#10;    }),&#10;    [response],&#10;  );&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: Theme.colors.primaryBackground }}&gt;&#10;        &lt;ActivityIndicator size=&quot;large&quot; color={Theme.colors.white} /&gt;&#10;      &lt;/View&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;AuthContext.Provider value={authContext}&gt;&#10;      &lt;Stack&gt;&#10;        {isSignedIn ? (&#10;          &lt;Stack.Screen name=&quot;(tabs)&quot; options={{ headerShown: false }} /&gt;&#10;        ) : (&#10;          &lt;Stack.Screen name=&quot;(auth)&quot; options={{ headerShown: false }} /&gt;&#10;        )}&#10;        &lt;Stack.Screen name=&quot;+not-found&quot; /&gt;&#10;      &lt;/Stack&gt;&#10;      &lt;StatusBar style=&quot;auto&quot; /&gt;&#10;    &lt;/AuthContext.Provider&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { Stack, useRouter } from 'expo-router';&#10;import { StatusBar } from 'expo-status-bar';&#10;import 'react-native-reanimated';&#10;import { useState, useMemo, useEffect } from 'react';&#10;import AsyncStorage from '@react-native-async-storage/async-storage';&#10;import { ActivityIndicator, View } from 'react-native';&#10;import axios from 'axios';&#10;import * as WebBrowser from 'expo-web-browser';&#10;import * as Google from 'expo-auth-session/providers/google';&#10;import * as AuthSession from 'expo-auth-session';&#10;&#10;import { AuthContext } from '@/app/context/AuthContext';&#10;import { Theme } from '@/constants/Themes';&#10;&#10;const API_BASE_URL = 'https://mory-backend-production.up.railway.app';&#10;&#10;WebBrowser.maybeCompleteAuthSession();&#10;&#10;WebBrowser.maybeCompleteAuthSession();&#10;&#10;export default function RootLayout() {&#10;  const router = useRouter();&#10;  const [isSignedIn, setIsSignedIn] = useState&lt;boolean | null&gt;(null);&#10;  const [loading, setLoading] = useState(true);&#10;&#10;  const [request, response, promptAsync] = Google.useAuthRequest({&#10;    clientId: process.env.EXPO_PUBLIC_GOOGLE_CLIENT_ID_WEB,&#10;    redirectUri: AuthSession.makeRedirectUri({ useProxy: true }),&#10;  });&#10;&#10;  useEffect(() =&gt; {&#10;    const loadSignInStatus = async () =&gt; {&#10;      try {&#10;        const storedStatus = await AsyncStorage.getItem('isSignedIn');&#10;        if (storedStatus !== null) {&#10;          setIsSignedIn(JSON.parse(storedStatus));&#10;        } else {&#10;          setIsSignedIn(false);&#10;        }&#10;      } catch (e) {&#10;        console.error('Failed to load sign-in status', e);&#10;        setIsSignedIn(false);&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    };&#10;&#10;    loadSignInStatus();&#10;  }, []);&#10;&#10;  useEffect(() =&gt; {&#10;    if (response?.type === 'success') {&#10;      const { params } = response;&#10;      const status = params.status;&#10;      const value = params.value;&#10;&#10;      if (status === 'login' &amp;&amp; value) {&#10;        const { accessToken } = JSON.parse(decodeURIComponent(value));&#10;        AsyncStorage.setItem('accessToken', accessToken);&#10;        AsyncStorage.setItem('isSignedIn', JSON.stringify(true));&#10;        setIsSignedIn(true);&#10;        router.replace('/(tabs)/');&#10;      } else if (status === 'register' &amp;&amp; value) {&#10;        const { email, name, provider } = JSON.parse(decodeURIComponent(value));&#10;        router.replace({&#10;          pathname: '/signup',&#10;          params: { email, name, provider },&#10;        });&#10;      }&#10;    }&#10;  }, [response]);&#10;&#10;  const authContext = useMemo(&#10;    () =&gt; ({&#10;      signIn: async (username: any, password: any) =&gt; {&#10;        try {&#10;          const response = await axios.post(`${API_BASE_URL}/auth/login`, {&#10;            email: username,&#10;            password,&#10;          });&#10;          const { accessToken } = response.data;&#10;          await AsyncStorage.setItem('accessToken', accessToken);&#10;          await AsyncStorage.setItem('isSignedIn', JSON.stringify(true));&#10;          setIsSignedIn(true);&#10;        } catch (error) {&#10;          if (axios.isAxiosError(error) &amp;&amp; error.response) {&#10;            console.error('Login failed:', error.response.data);&#10;            throw new Error(error.response.data.message || '로그인에 실패했습니다.');&#10;          } else {&#10;            console.error('Login failed:', error);&#10;            throw error;&#10;          }&#10;        }&#10;      },&#10;      googleSignIn: async () =&gt; {&#10;        if (request &amp;&amp; request.loaded) {&#10;          await promptAsync();&#10;        } else {&#10;          console.warn('Google auth request not ready yet.');&#10;        }&#10;      },&#10;      signOut: async () =&gt; {&#10;        setIsSignedIn(false);&#10;        await AsyncStorage.removeItem('isSignedIn');&#10;        await AsyncStorage.removeItem('accessToken');&#10;      },&#10;      signUp: async (name: any, email: any, password: any, mbti: any, provider: any) =&gt; {&#10;        try {&#10;          const response = await axios.post(`${API_BASE_URL}/auth/register`, {&#10;            email,&#10;            name,&#10;            password,&#10;            mbti: mbti || 'EF',&#10;            provider: provider || 'local',&#10;          });&#10;          await AsyncStorage.setItem('isSignedIn', JSON.stringify(true));&#10;          setIsSignedIn(true);&#10;        } catch (error) {&#10;          if (axios.isAxiosError(error) &amp;&amp; error.response) {&#10;            console.error('Sign up failed:', error.response.data);&#10;            throw new Error(error.response.data.message || '회원가입에 실패했습니다.');&#10;          } else {&#10;            console.error('Sign up failed:', error);&#10;            throw error;&#10;          }&#10;        }&#10;      },&#10;      updateProfile: async (mbti: string) =&gt; {&#10;        try {&#10;          const accessToken = await AsyncStorage.getItem('accessToken');&#10;          if (!accessToken) {&#10;            throw new Error('No access token found');&#10;          }&#10;          await axios.patch(`${API_BASE_URL}/auth`, &#10;            { mbti },&#10;            { headers: { Authorization: `Bearer ${accessToken}` } }&#10;          );&#10;        } catch (error) {&#10;          console.error('Profile update failed:', error);&#10;          throw error;&#10;        }&#10;      },&#10;      getUserInfo: async () =&gt; {&#10;        // 로그인 기능이 작동하지 않을 때 임시로 사용할 사용자 정보&#10;        return {&#10;          name: &quot;테스트 사용자&quot;,&#10;          email: &quot;test@example.com&quot;,&#10;          mbti: &quot;EF&quot;, // 임의의 MBTI&#10;        };&#10;      },&#10;    }),&#10;    [response],&#10;  );&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: Theme.colors.primaryBackground }}&gt;&#10;        &lt;ActivityIndicator size=&quot;large&quot; color={Theme.colors.white} /&gt;&#10;      &lt;/View&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;AuthContext.Provider value={authContext}&gt;&#10;      &lt;Stack&gt;&#10;        {isSignedIn ? (&#10;          &lt;Stack.Screen name=&quot;(tabs)&quot; options={{ headerShown: false }} /&gt;&#10;        ) : (&#10;          &lt;Stack.Screen name=&quot;(auth)&quot; options={{ headerShown: false }} /&gt;&#10;        )}&#10;        &lt;Stack.Screen name=&quot;+not-found&quot; /&gt;&#10;      &lt;/Stack&gt;&#10;      &lt;StatusBar style=&quot;auto&quot; /&gt;&#10;    &lt;/AuthContext.Provider&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>